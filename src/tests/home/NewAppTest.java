// Generated by Selenium IDE
package tests.home;

import org.openqa.selenium.JavascriptExecutor;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;


import base.TestBase;
import pages.ContactPage;
import pages.LoginPage;
import pages.home.*;
import utilities.Log;
import utilities.TestUtils;
import utilities.XcelRead;


public class NewAppTest extends TestBase{

	protected TestUtils testUtils;
	protected ContactPage contactPage;
	protected LoginPage loginPage;
	protected JavascriptExecutor js;
	protected HomePage homePage;
	protected AppManagerPage appManagerPage;

	NewAppTest(){
		super();
	}


	@BeforeClass
	public void setUp() throws InterruptedException {

		//		System.out.println("Inside before class"+driver);
		//		System.setProperty("webdriver.chrome.driver", "WebDrivers\\chromedriver.exe");
		//		
		//		ChromeOptions o = new ChromeOptions();
		//		o.addArguments("--disable-notifications");
		//		driver = new ChromeDriver(o);
		//		
		//		driver.get("https://persistentsystems-3c7-dev-ed.my.salesforce.com/");
		//		driver.manage().window().maximize();
		//		driver.findElement(By.xpath("//input[@id='username']")).sendKeys("salesforceminipr@gmail.com");
		//		driver.findElement(By.xpath("//input[@id='password']")).sendKeys(" Hinjewadi99");
		//		driver.findElement(By.xpath("//input[@id='Login']")).click();
		initialization();
		testUtils = new TestUtils();
		loginPage = new LoginPage();
		loginPage.login(prop.getProperty("email") , prop.getProperty("password"));
	}


	@AfterMethod
	public void backToHome() {
		driver.get("https://persistentsystems-3c7-dev-ed.lightning.force.com/lightning/setup/SetupOneHome/home");
	}

	@AfterMethod
	public void afterMethod(ITestResult result) throws Exception{
		if(ITestResult.FAILURE == result.getStatus()) {
			TestUtils.takeScreenshotAtEndOfTest(result.getName());
			Log.error("Error in"+result.getName()+" Class");
		}
		driver.quit();
	}

	@DataProvider
	public Object[][] createAppDP(){
		Object[][] data = XcelRead.readFrom("createAppDP.xlsx");

		//		for(int i=0; i<3; i++) {
		//			for(int j=0; j<3; j++) {
		//				System.out.print(data[i][j] + " ");
		//			}
		//			System.out.println();
		//		}

		//		System.out.println(data[0][0] + " " + data[0][1] + " " + data[0][2]);

		return data;
	}

	@DataProvider
	public Object[][] editAppDP(){

		Object[][] data = XcelRead.readFrom("editAppDP.xlsx");

		for(int i=0; i<1; i++) {
			for(int j=0; j<5; j++) {
				System.out.print(data[i][j] + " ");
			}
			System.out.println();
		}

		return data;
	}


	@DataProvider
	public Object[][] deleteAppDP(){

		Object[][] data = XcelRead.readFrom("deleteAppDP.xlsx");

		for(int i=0; i<3; i++) {
			for(int j=0; j<2; j++) {
				System.out.print(data[i][j] + " ");
			}
			System.out.println();
		}

		return data;
	}

	@Test(dataProvider="createAppDP")
	public void createNewApp(String appName, String devName, String duplicate) {

		System.out.println(duplicate);

		homePage = new HomePage(driver);
		homePage.waitForPageLoad();
		homePage.verifyTitle();
		homePage.writeToSearchBox("App Manager");
		homePage.clickAppManager();

		appManagerPage = new AppManagerPage(driver);
		appManagerPage.waitForPageLoad();
		appManagerPage.verifyTitle();
		appManagerPage.createNewApp(appName, devName, duplicate);
		if(duplicate.equals("no"))
			Assert.assertEquals(true, appManagerPage.checkAppCreate(devName));
	}

	//   @Test(dataProvider="editAppDP", dependsOnMethods="createNewApp")
	//   public void editNewApp(String appName, String devName, String newAppName, String newDevName, String duplicate) {
	//	   
	//	   System.out.println(duplicate);
	//	   
	//	   homePage = new HomePage(driver);
	//	   homePage.waitForPageLoad();
	//	   homePage.verifyTitle();
	//	   homePage.writeToSearchBox("App Manager");
	//	   homePage.clickAppManager();
	//	    
	//	   appManagerPage = new AppManagerPage(driver);
	//       appManagerPage.waitForPageLoad();
	//       appManagerPage.verifyTitle();
	//       appManagerPage.editApp(appName, devName, newAppName, newDevName, duplicate);
	//       if(duplicate.equals("no"))
	//             Assert.assertEquals(true, appManagerPage.checkAppEdit(newAppName, newDevName));
	//   }

	@Test(dataProvider="deleteAppDP", dependsOnMethods = "createNewApp")
	public void deleteApp(String devName, String appType) {

		homePage = new HomePage(driver);
		homePage.waitForPageLoad();
		homePage.verifyTitle();
		homePage.writeToSearchBox("App Manager");
		homePage.clickAppManager();

		appManagerPage = new AppManagerPage(driver);
		appManagerPage.waitForPageLoad();
		appManagerPage.verifyTitle();
		appManagerPage.deleteApp(devName, appType);

		if(appType.equals("non-default"))
			Assert.assertEquals(true, appManagerPage.checkAppDelete(devName));

		else if(appType.equals("default"))
			Assert.assertEquals(false, appManagerPage.checkAppDelete(devName));
	}
}
